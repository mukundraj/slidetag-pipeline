import os
# configfile: "../../configs/config.yaml"
# configfile: "../../configs/config_test.yaml"
configfile: "./build/config.yaml"


rule test:
	params:
		p=1
	output:
		"b"
	shell:
		"echo {params.p} {output} "+config['datapath']+" > b"

rule injest_imgs:
	input:
		nissls=config['homedir']+config['datapath']+'/nissls'+'.zip',
		stags=config['homedir']+config['datapath']+'/stags'+'.zip'
	output:
		dataset_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/raw'),
		# stags_op=directory(config['homedir']+config['oproot']+'/'+config['dataname'])
	shell:
		"unzip {input.nissls} -d {output.dataset_dir} ; unzip {input.stags} -d {output.dataset_dir}"

# rule format_imgs using python script after reading from raw ims directory
rule format_imgs:
	input:
		dataset_dir=rules.injest_imgs.output.dataset_dir
	output:
		dataset_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/formatted')
	script:
		"../src/workflow/format_imgs.py" # relative to Snakefile (Snakefile link in this case)

fnames, = glob_wildcards(config['homedir']+config['oproot']+'/'+config['dataname']+'/raw/nissls/{fname,[^/]+}.tif')

print (fnames)
print(config['homedir']+config['oproot']+'/'+config['dataname']+'/nissls')

# rule all:
# 	input: 
# 		nissls=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}', fname=fnames),
rule all:
	input:
		nissls=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/{fname}.tif', fname=fnames),
		stags=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/stag_{fname}.tif', fname=fnames),

# rule to list dir and create a rigid/folder for each file
# rule create_rigid_folders:
# 	input:
# 		nissls=config['homedir']+config['oproot']+'/'+config['dataname']+'/nissls/{fname}.tif'
# 	output:
# 		nissls=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}'),
# 	shell:
# 		"mkdir -p {output.nissls}"

# rule to copy tifs
rule get_tifs:
	input:
		nissls=config['homedir']+config['oproot']+'/'+config['dataname']+'/formatted/nissls/{fname}.tif',
		stags=config['homedir']+config['oproot']+'/'+config['dataname']+'/formatted/stags/{fname}.tif',
	output:
		nissls=config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/{fname}.tif',
		stags=config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/stag_{fname}.tif',
	shell:
		'cp {input.nissls} {output.nissls} && cp {input.stags} {output.stags}'

# rule to copy and materialize slicer templates via python script
rule prep_rigid:
	input:

	output:

	script:
		"src/workflow/prep_rigid.py"

# create warps folders - check if step really needed?

# rule to get crop of nissl subregion and copy to warps folder

# read bead pos and transform to csv format

# transform coords based on T1 and T2

# plot tfmed points on nissl

