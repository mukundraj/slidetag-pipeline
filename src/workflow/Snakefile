import os
# configfile: "../../configs/config.yaml"
# configfile: "../../configs/config_test.yaml"
configfile: "./build/config.yaml"


rule test:
	params:
		p=1
	output:
		"b"
	shell:
		"echo {params.p} {output} "+config['datapath']+" > b"

rule test2:
	output:
		"b"
	shell:
		"echo aa {output} "+"hello"+"2>&1 | tee b"

rule test_r:
	params:
		p=1
	output:
		opimg=config['homedir']+config['oproot']+'/tmp.png'
	conda:
		'../envs/'+config['r_envname']+'.yml'
	script:
		"../src/R/test.R"

# unzip user uploaded zip file into dataname/raw folder
rule unzip_data:
	input:
		inpzip=config['homedir']+config['datapath']+'/'+config['dataname']+'.zip'
	output:
		outdir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/00_raw'),
	shell:
		"unzip {input.inpzip} -d {output.outdir}"


# Generate stag imgs and place in interim/stag folder. Also saves coords for each celltype in interim/stags_coords folder.
rule get_stag_imgs:
	input:
		raw_dir=rules.unzip_data.output.outdir
	output:
		stag_imgs_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/01_interim/stags'),
		stag_coords_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/01_interim/stags_coords')
	conda:
		'../envs/'+config['r_envname']+'.yml'
	script:
		"../src/R/get_stag_imgs2.R"

# copies nissl img from raw folder to raw/nissls folder
rule get_nissl_imgs:
	input:
		raw_dir=rules.unzip_data.output.outdir
	output:
		nissl_imgs_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/01_interim/nissls'),
	shell:
		"mkdir -p {output.nissl_imgs_dir} && cp {input.raw_dir}/"+config['dataname']+"/*.png {output.nissl_imgs_dir}"


# rule format_imgs using python script after reading from raw ims directory
rule format_imgs:
	input:
		stag_imgs_dir=rules.get_stag_imgs.output.stag_imgs_dir,
		nissl_imgs_dir=rules.get_nissl_imgs.output.nissl_imgs_dir
	output:
		fmted_imgs_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/02_formatted')
	script:
		"../src/workflow/format_imgs.py" # relative to Snakefile (Snakefile link in this case)

fnames, = glob_wildcards(config['homedir']+config['oproot']+'/'+config['dataname']+'/raw/stags/{fname,[^/]+}.tif')

print (fnames)
print(config['homedir']+config['oproot']+'/'+config['dataname']+'/nissls')

rule all:
	input:
		olayplot=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/plots/{fname}/overlay_{fname}.png',fname=fnames)

# rule prep_rigid_driver:
# 	input:
# 		mrml=config['homedir']+config['oproot']+'/'+config['dataname']+f'/rigid/{config['dataname']}/{config['dataname']}.mrml',
# 		from_fids=config['homedir']+config['oproot']+'/'+config['dataname']+f'/rigid/{config['dataname']}/F.mrk.json',
# 		to_fids=config['homedir']+config['oproot']+'/'+config['dataname']+f'/rigid/{config['dataname']}/T.mrk.json',
# 		tfm1=config['homedir']+config['oproot']+'/'+config['dataname']+f'/rigid/{config['dataname']}/Tfm1.txt',

rule prep_warp_driver:
	input:
		nissl=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/{fname}.tif', fname=fnames),
		stag=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/stag_{fname}.tif', fname=fnames),
		mrml=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/{fname}.mrml', fname=fnames),
		from_fids=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/F.fcsv', fname=fnames),
		to_fids=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/T.fcsv', fname=fnames),
		tfm1ed_pts=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/tfm1ed_pts.txt', fname=fnames),

rule get_tifs:
	input:
		fmted_imgs_dir=rules.format_imgs.output.fmted_imgs_dir,
	output:
		rigid_imgs_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/03_rigid/tifs'),
	shell:
		"mkdir -p {output.rigid_imgs_dir}/nissls && mkdir -p {output.rigid_imgs_dir}/stags && cp {input.fmted_imgs_dir}/nissls/*.tif {output.rigid_imgs_dir}/nissls/ && cp {input.fmted_imgs_dir}/stags/*.tif {output.rigid_imgs_dir}/stags/"

# rule to copy and materialize slicer templates via python script
rule prep_rigid:
	input:
		rigid_imgs_dir=rules.get_tifs.output.rigid_imgs_dir,
		mrml_template='templates/rigid/rigid.mrml',
		from_fids='templates/rigid/F.mrk.json',
		to_fids='templates/rigid/T.mrk.json',
		tfm1='templates/rigid/Tfm1.txt',
	output:
		mrml=config['homedir']+config['oproot']+'/'+config['dataname']+f'/03_rigid/{config["dataname"]}.mrml',
		from_fids=config['homedir']+config['oproot']+'/'+config['dataname']+f'/03_rigid/F.mrk.json',
		to_fids=config['homedir']+config['oproot']+'/'+config['dataname']+f'/03_rigid/T.mrk.json',
		tfm1=config['homedir']+config['oproot']+'/'+config['dataname']+f'/03_rigid/Tfm1.txt',

	conda:
		'../envs/'+config['envname']+'.yml'

	script:
		"../src/workflow/prep_rigid.py"


# rule to get crop of nissl subregion and copy to warps folder
rule prep_warp:
	input:
		tfm1=rules.prep_rigid.output.tfm1,
		nissl=config['homedir']+config['oproot']+'/'+config['dataname']+f'/03_rigid/tifs/nissls/{config["dataname"]}_nissl.tif',
		data=config['homedir']+config['oproot']+'/'+config['dataname']+f'/01_interim/stags_coords',
		mrml_template='templates/warp/warp.mrml',
		from_fids='templates/warp/F.fcsv',
		to_fids='templates/warp/T.fcsv',

	output:
		tfm1ed_pts_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/04_warp/tfmed_pts'),
		nis_imgs_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/04_warp/tifs/nissls'),
		stag_imgs_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/04_warp/tifs/stags'),
		mrml=config['homedir']+config['oproot']+'/'+config['dataname']+'/04_warp/'+config['dataname']+'.mrml',
		from_fids=config['homedir']+config['oproot']+'/'+config['dataname']+'/04_warp/F.fcsv',
		to_fids=config['homedir']+config['oproot']+'/'+config['dataname']+'/04_warp/T.fcsv',
		bbox=config['homedir']+config['oproot']+'/'+config['dataname']+'/04_warp/bbox.txt',

	conda:
		'../envs/'+config['envname']+'.yml'

	script:
		"../src/workflow/prep_warp.py"

# # rule to create overlay plot from registered stag coords
rule render_plots:
	input:
		nissl_dir=rules.prep_warp.output.nis_imgs_dir,
		from_fids=rules.prep_warp.output.from_fids,
		to_fids=rules.prep_warp.output.to_fids,
		tfm1ed_pts_dir=rules.prep_warp.output.tfm1ed_pts_dir,
		bbox_file=rules.prep_warp.output.bbox,
		# data=rules.prep_warp.input.data, # initially added for color info
	output:
		olay_plots_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/05_plots'),

	conda:
		'../envs/'+config['envname']+'.yml'
	script:
		"../src/workflow/render_plots.py"

