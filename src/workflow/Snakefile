import os
# configfile: "../../configs/config.yaml"
# configfile: "../../configs/config_test.yaml"
configfile: "./build/config.yaml"


rule test:
	params:
		p=1
	output:
		"b"
	shell:
		"echo {params.p} {output} "+config['datapath']+" > b"

rule injest_imgs:
	input:
		nissls=config['homedir']+config['datapath']+'/nissls'+'.zip',
		stags=config['homedir']+config['datapath']+'/stags'+'.zip'
	output:
		dataset_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/raw'),
		# stags_op=directory(config['homedir']+config['oproot']+'/'+config['dataname'])
	shell:
		"unzip {input.nissls} -d {output.dataset_dir} ; unzip {input.stags} -d {output.dataset_dir}"

# rule format_imgs using python script after reading from raw ims directory
rule format_imgs:
	input:
		dataset_dir=rules.injest_imgs.output.dataset_dir
	output:
		dataset_dir=directory(config['homedir']+config['oproot']+'/'+config['dataname']+'/formatted')
	script:
		"../src/workflow/format_imgs.py" # relative to Snakefile (Snakefile link in this case)

fnames, = glob_wildcards(config['homedir']+config['oproot']+'/'+config['dataname']+'/raw/nissls/{fname,[^/]+}.tif')

print (fnames)
print(config['homedir']+config['oproot']+'/'+config['dataname']+'/nissls')

rule all:
	input:
		nissl=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/{fname}.tif', fname=fnames),
		stag=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/stag_{fname}.tif', fname=fnames),
		mrml=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/{fname}.mrml', fname=fnames),
		from_fids=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/F.mrk.json', fname=fnames),
		to_fids=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/T.mrk.json', fname=fnames),
		# tfm2=expand(config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/Tfm2.txt', fname=fnames),

# rule to copy tifs
rule get_tifs:
	input:
		nissls=config['homedir']+config['oproot']+'/'+config['dataname']+'/formatted/nissls/{fname}.tif',
		stags=config['homedir']+config['oproot']+'/'+config['dataname']+'/formatted/stags/{fname}.tif',
	output:
		nissls=config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/{fname}.tif',
		stags=config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/stag_{fname}.tif',
	shell:
		'cp {input.nissls} {output.nissls} && cp {input.stags} {output.stags}'

# rule to copy and materialize slicer templates via python script
rule prep_rigid:
	input:
		nissls=config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/{fname}.tif',
		stags=config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/stag_{fname}.tif',
		template='templates/rigid.mrml'
	output:
		mrml=config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/{fname}.mrml',
		from_fids=config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/F.mrk.json',
		to_fids=config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/T.mrk.json',
		tfm1=config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/Tfm1.txt',

	script:
		"../src/workflow/prep_rigid.py"


# rule to get crop of nissl subregion and copy to warps folder
rule prep_warp:
	input:
		tfm1=rules.prep_rigid.output.tfm1,
		nissl=config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/{fname}.tif',
		stag=config['homedir']+config['oproot']+'/'+config['dataname']+'/rigid/{fname}/stag_{fname}.tif',

	output:
		nissl=config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/{fname}.tif',
		stag=config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/stag_{fname}.tif',
		mrml=config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/{fname}.mrml',
		from_fids=config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/F.mrk.json',
		to_fids=config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/T.mrk.json',
		# tfm2=config['homedir']+config['oproot']+'/'+config['dataname']+'/warps/{fname}/Tfm2.txt',

	script:
		"../src/workflow/prep_warp.py"

# read warped bead pos and transform to csv format

# transform coords based on T1 and T2

# plot tfmed points on nissl

